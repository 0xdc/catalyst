#!/usr/bin/python -OO

# Maintained in full by:
# Andrew Gaffney <agaffney@gentoo.org>
# Chris Gianelloni <wolf31o2@gentoo.org>

import os, sys, getopt

# This assumes that our modules are in a sub-dir named "modules" in the
# directory that the main catalyst binary is in
__selfpath__ = os.path.abspath(os.path.dirname(__file__))
sys.path.append(__selfpath__ + "/modules")

import catalyst
from catalyst.output import *
from catalyst.error import *
from catalyst.hash import hash_map

__maintainer__="Chris Gianelloni <wolf31o2@gentoo.org>"
__version__="2.99"

conf_values={}
config = catalyst.config.config()

def usage():
	print "Usage catalyst [options] [-C variable=value...] [ -s identifier]"
	print " -a --clear-autoresume	clear autoresume flags"
	print " -c --config     use specified configuration file"
	print " -C --cli        catalyst commandline (MUST BE LAST OPTION)"
	print " -d --debug      enable debugging"
	print " -f --file       read specfile"
	print " -F --fetchonly  fetch files only"
	print " -h --help       print this help message"
	print " -p --purge      clear tmp dirs,package cache and autoresume flags"
	print " -P --purgeonly  clear tmp dirs,package cache and autoresume flags and exit"
	print " -s --snapshot   generate a release snapshot"
	print " -V --version    display version information"
	print " -v --verbose    verbose output"
	print
	print "Usage examples:"
	print
	print "Using the commandline option (-C, --cli) to build a Portage snapshot:"
	print "catalyst -C target=snapshot version_stamp=my_date"
	print
	print "Using the snapshot option (-s, --snapshot) to build a release snapshot:"
	print "catalyst -s 20071121"
	print
	print "Using the specfile option (-f, --file) to build a stage target:"
	print "catalyst -f stage1-specfile.spec"

def show_version():
	msg("Catalyst, version " + __version__)
	msg("Copyright 2003-2008 Gentoo Foundation")
	msg("Copyright 2008 various authors")
	msg("Distributed under the GNU General Public License version 2.1")

def parse_config(myconfig):
	# search a couple of different areas for the main config file
	myconf = {}
	config_file = ""

	confdefaults = {
		"storedir": "/var/tmp/catalyst",
		"sharedir": "/usr/share/catalyst",
		"distdir": "/usr/portage/distfiles",
		"portdir": "/usr/portage",
		"options": "",
		"snapshot_cache": "/var/tmp/catalyst/snapshot_cache",
		"hash_function": "crc32"
	}

	# first, try the one passed (presumably from the cmdline)
	if myconfig:
		if os.path.exists(myconfig):
			msg("Using command line specified Catalyst configuration file, " + myconfig)
			config_file = myconfig
		else:
			die("specified configuration file " + myconfig + " does not exist")

	# next, try the default location
	elif os.path.exists("/etc/catalyst/catalyst.conf"):
		msg("Using default Catalyst configuration file, /etc/catalyst/catalyst.conf")
		config_file="/etc/catalyst/catalyst.conf"

	# can't find a config file (we are screwed), so bail out
	else:
		die("Could not find a suitable configuration file")

	# Load the default config values into myconf
	for x in confdefaults:
		msg("Setting " + x + " to default value '" + confdefaults[x] + "'")
		myconf[x] = confdefaults[x]

	# now, try and parse the config file "config_file"
	try:
		myconfig = catalyst.config.ConfigParser(config_file)
		myconf.update(myconfig.get_values())

	except:
		die("Unable to parse configuration file, " + myconfig)

	# now, load up the values into conf_values so that we can use them
	for x in confdefaults.keys():
		if x in myconf:
			msg("Setting " + x + " to config file value '" + myconf[x] + "'")
			conf_values[x]=myconf[x]
		else:
			msg("Setting " + x + " to default value '"+confdefaults[x] + "'")
			conf_values[x]=confdefaults[x]

	options = (
		("autoresume", "AUTORESUME", "Autoresuming support enabled."),
		("ccache", "CCACHE", "Compiler cache support enabled."),
		("clear-autoresume", "CLEAR_AUTORESUME", "Cleaning autoresume flags support enabled"),
#		("compress", "COMPRESS", "Compression enabled."),
		("distcc", "DISTCC", "Distcc support enabled."),
		("icecream", "ICECREAM", "Icecream compiler cluster support enabled."),
		("kerncache", "KERNCACHE", "Kernel cache support enabled."),
		("pkgcache", "PKGCACHE", "Package cache support enabled."),
		("purge", "PURGE", "Purge support enabled."),
		("seedcache", "SEEDCACHE", "Seed cache support enabled."),
		("snapcache", "SNAPCACHE", "Snapshot cache support enabled."),
		("metadata_overlay", "METADATA_OVERLAY", "Use of metadata_overlay module for portage enabled."),
#		("tarball", "TARBALL", "Tarball creation enabled.")
	)

	split_options = conf_values["options"].split()

	# parse out the rest of the options from the config file
	for x in options:
		if x[0] in split_options:
			msg(x[2])
			conf_values[x[1]] = "1"

	if "digests" in myconf:
		conf_values["digests"] = myconf["digests"]

	if "contents" in myconf:
		conf_values["contents"] = myconf["contents"]

	if "envscript" in myconf:
		msg("Envscript support enabled.")
		conf_values["ENVSCRIPT"] = myconf["envscript"]

def build_target(addlargs, targetmap):
	try:
		if not addlargs["target"] in targetmap:
			raise CatalystError,"Target \""+addlargs["target"]+"\" not available."

		config.get_spec().set_target(addlargs["target"])
#		mytarget=targetmap[addlargs["target"]](conf_values, addlargs)
		mytarget=targetmap[addlargs["target"]]()

		mytarget.run()

	except:
		catalyst.util.print_traceback()
		warn("Error encountered during run of target " + addlargs["target"])
		raise

def verify_digest_and_hash_functions():
	# Start checking that digests are valid now that the hash_map was imported from catalyst_support
	if "digests" in conf_values:
		for i in conf_values["digests"].split():
			if not i in hash_map:
				msg()
				msg(i + " is not a valid digest entry")
				msg("Valid digest entries:")
				msg("\n".join(hash_map.keys()))
				msg()
				msg("Catalyst aborting....")
				sys.exit(2)
			if catalyst.util.find_binary(hash_map[i][1]) == None:
				msg()
				msg("digest=" + i)
				msg("\tThe " + hash_map[i][1] + \
					" binary was not found. It needs to be in your system path")
				msg()
				msg("Catalyst aborting....")
				sys.exit(2)

	if "hash_function" in conf_values:
		if not conf_values["hash_function"] in hash_map:
			msg()
			msg(conf_values["hash_function"] + " is not a valid hash_function entry")
			msg("Valid hash_function entries:")
			msg("\n".join(hash_map.keys()))
			msg()
			msg("Catalyst aborting....")
			sys.exit(2)
		if catalyst.util.find_binary(hash_map[conf_values["hash_function"]][1]) == None:
			msg()
			msg("hash_function=" + conf_values["hash_function"])
			msg("\tThe " + hash_map[conf_values["hash_function"]][1] + \
				" binary was not found. It needs to be in your system path")
			msg()
			msg("Catalyst aborting....")
			sys.exit(2)

if __name__ == "__main__":

	show_version()

	if os.getuid() != 0:
		# catalyst cannot be run as a normal user due to chroots, mounts, etc
		die("This script requires root privileges to operate", 2)

	# parse out the command line arguments
	try:
		opts,args = getopt.getopt(sys.argv[1:], "apPhvdc:C:f:FVs:", ["purge", "purgeonly", "help", "version", "debug",\
			"clear-autoresume", "config=", "cli=", "file=", "fetch", "verbose","snapshot="])

	except getopt.GetoptError:
		usage()
		sys.exit(2)

	# defaults for commandline opts
	debug=False
	verbose=False
	fetch=False
	myconfig=""
	myspecfile=""
	mycmdline=[]
	myopts=[]

	# check preconditions
	if len(opts) == 0:
		warn("please specify one of either -f or -C\n")
		usage()
		sys.exit(2)

	run = False
	for o, a in opts:
		if o in ("-h", "--help"):
			usage()
			sys.exit(1)

		if o in ("-V", "--version"):
			show_version()
			sys.exit(1)

		if o in ("-d", "--debug"):
			conf_values["DEBUG"]="1"
			conf_values["VERBOSE"]="1"

		if o in ("-c", "--config"):
			myconfig=a

		if o in ("-C", "--cli"):
			run = True
			x = sys.argv.index(o) + 1
			while x < len(sys.argv):
				mycmdline.append(sys.argv[x])
				x = x + 1

		if o in ("-f", "--file"):
			run = True
			myspecfile = a

		if o in ("-F", "--fetchonly"):
			conf_values["FETCH"] = "1"

		if o in ("-v", "--verbose"):
			conf_values["VERBOSE"] = "1"

		if o in ("-s", "--snapshot"):
			if len(sys.argv) < 3:
				warn("missing snapshot identifier")
				usage()
				sys.exit(2)
			else:
				run = True
				mycmdline.append("target=snapshot")
				mycmdline.append("version_stamp="+a)

		if o in ("-p", "--purge"):
			conf_values["PURGE"] = "1"

		if o in ("-P", "--purgeonly"):
			conf_values["PURGEONLY"] = "1"

		if o in ("-a", "--clear-autoresume"):
			conf_values["CLEAR_AUTORESUME"] = "1"

	if not run:
		warn("please specify one of either -f or -C")
		usage()
		sys.exit(2)

	parse_config(myconfig)

	verify_digest_and_hash_functions()

	targetmap = catalyst.target.build_target_map()

	addlargs = {}
	spec = catalyst.config.Spec()

	if myspecfile:
		specparser = catalyst.config.SpecParser(myspecfile)
		spec_values = specparser.get_values()
		addlargs.update(spec_values)
		spec.parse_values(spec_values)

	if mycmdline:
		try:
			cmdline = catalyst.config.ConfigParser()
			cmdline.parse_lines(mycmdline)
			cmdline_values = cmdline.get_values()
			addlargs.update(cmdline.get_values())
			spec.parse_values(cmdline_values)
		except CatalystError:
			die("Could not parse commandline, exiting.")

	config.set_spec(spec)
	config.set_conf(conf_values)

	if not "target" in addlargs:
		raise CatalystError, "Required value \"target\" not specified."

	# everything is setup, so the build is a go
	try:
		build_target(addlargs, targetmap)

	except CatalystError:
		msg()
		msg("Catalyst aborting....")
		sys.exit(2)

	except KeyboardInterrupt:
		msg()
		msg("Catalyst build aborted due to user interrupt ( Ctrl-C )")
		msg()
		msg("Catalyst aborting....")
		sys.exit(2)

	except LockInUse:
		msg("Catalyst aborting....")
		sys.exit(2)

	except:
		msg("Catalyst aborting....")
		raise
		sys.exit(2)

	#except KeyError:
	#	print "\nproblem with command line or spec file ( Key Error )"
	#	print "Key: "+str(sys.exc_value)+" was not found"
	#	print "Catalyst aborting...."
	#	sys.exit(2)
	#except UnboundLocalError:
	#	print
	#	print "UnboundLocalError: "+str(sys.exc_value)+" was not found"
	#	raise
	#	print
	#	print "Catalyst aborting...."
	#	sys.exit(2)
